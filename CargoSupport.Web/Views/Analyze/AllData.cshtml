@model List<CargoSupport.Models.PinRouteModel>;
@{
    ViewData["Title"] = "Analyze";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
<link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-grid.css">
<link rel="stylesheet" href="https://unpkg.com/ag-grid-community/dist/styles/ag-theme-alpine.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
      integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
      crossorigin="" />

<div class="text-center">
    <div class="row">
        <p></p>
    </div>
    <div class="row">
        <div class="col-sm">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-sm">
            <div>
                <h6 id="SelectedAvrWeight"></h6>
            </div>
            <br>
            <div>
                <h6 id="SelectedAvrCustomers"></h6>
            </div>
            <br>
            <div>
                <h6 id="SelectedAvrDistance"></h6>
            </div>
        </div>
        <div class="col-sm">
            <div>
                <h6 id="WeekAvrWeight"></h6>
            </div>
            <br>
            <div>
                <h6 id="WeekAvrCustomers"></h6>
            </div>
            <br>
            <div>
                <h6 id="WeekAvrDistance"></h6>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-8">
            <canvas id="MainCanvas"></canvas>
        </div>
        <div class="col-sm-4">
            <div id="mapid" style="height: 800px;"></div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/js/dummyData.js" asp-append-version="true"></script>

    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
            integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
            crossorigin=""></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
            integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"
            integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN"
            crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"
            integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV"
            crossorigin="anonymous"></script>
    <script src="https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.noStyle.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/sv.js"></script>

    <script>
        const timeFormat = 'YYYY-MM-DD';
        let fromDate = moment().subtract(7, 'd');
        let toDate = moment();

        flatpickr('#calendar-from', {
            "locale": "sv",
            "maxDate": new Date(),
            defaultDate: new Date().fp_incr(-6),
            onChange: function (selectedDates, dateStr, instance) {
                fromDate = moment(dateStr, timeFormat);
                window.myLine.options.scales.xAxes[0].time.min = dateStr;
                window.myLine.update();
                updateAverage();
                addCustomersToMap()
            }
        });
        flatpickr('#calendar-to', {
            "locale": "sv",
            "maxDate": new Date(),
            defaultDate: "today",
            onChange: function (selectedDates, dateStr, instance) {
                toDate = moment(dateStr, timeFormat);
                window.myLine.options.scales.xAxes[0].time.max = dateStr;
                window.myLine.update();
                updateAverage();
                addCustomersToMap();
            }
        });

        function calculateAvr(arrayWithData, divisionWith) {
            return Math.round(getYSum(arrayWithData) / divisionWith);
        }
        function getNumberOfRoutesThisWeek(arrayWithData) {

        }

        function getYSum(arrayWithData) {
            var sum = 0;
            for (var i = 0; i < arrayWithData.length; i++) {
                sum += parseInt(arrayWithData[i].y);
            }
            return sum;
        }

        function getDataBetweenTwoDates(arrayWithData, fromDate, toDate) {

            var arrayWithDataThatMatches = [];
            for (var i = 0; i < arrayWithData.length; i++) {

                let currentDate = moment(arrayWithData[i].x);

                if (currentDate.isBetween(fromDate, toDate)) {
                    arrayWithDataThatMatches.push(arrayWithData[i])
                }
            }
            return arrayWithDataThatMatches;
        }

        function convertStringToDate(date) {
            var splittedDate = date.split('-');
            return new Date(splittedDate[2], parseInt(splittedDate[1]) - 1, splittedDate[0]);
        }

        var map = L.map('mapid');
        L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        map.setView([59.4293, 18.0686], 10);
        var markersLayer = new L.LayerGroup();

        function addCustomersToMap() {
            markersLayer.clearLayers();

            var matchingData = getDataBetweenTwoDates(xCustomerPositionData, fromDate, toDate)
            var marker;
            for (var i = 0; i < matchingData.length; i++) {

                marker = L.marker([matchingData[i].y, matchingData[i].z])
                    .bindPopup('Datum för leverans: ' + matchingData[i].x)
                markersLayer.addLayer(marker);
            }
        }

        addCustomersToMap()
        markersLayer.addTo(map);

        updateAverage();
        function updateAverage() {
            document.getElementById('SelectedAvrWeight').innerText = "Vikt/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(xKiloData, fromDate, toDate), getDataBetweenTwoDates(xKiloData, fromDate, toDate).length) + " kg"
            document.getElementById('SelectedAvrCustomers').innerText = "Kunder/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(xCustomerData, fromDate, toDate), getDataBetweenTwoDates(xCustomerData, fromDate, toDate).length) + " kunder"
            document.getElementById('SelectedAvrDistance').innerText = "Kördistans/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(xDrivingData, fromDate, toDate), getDataBetweenTwoDates(xDrivingData, fromDate, toDate).length) + " km"
        }

        document.getElementById('WeekAvrWeight').innerText = "Veckans vikt/tur: " + calculateAvr(getDataBetweenTwoDates(xKiloData, moment().subtract(7, 'd'), moment()), getDataBetweenTwoDates(xKiloData, moment().subtract(7, 'd'), moment()).length) + " kg"
        document.getElementById('WeekAvrCustomers').innerText = "Veckans kunder/tur: " + calculateAvr(getDataBetweenTwoDates(xCustomerData, moment().subtract(7, 'd'), moment()), getDataBetweenTwoDates(xCustomerData, moment().subtract(7, 'd'), moment()).length) + " kunder"
        document.getElementById('WeekAvrDistance').innerText = "Veckans kördistans/tur: " + calculateAvr(getDataBetweenTwoDates(xDrivingData, moment().subtract(7, 'd'), moment()), getDataBetweenTwoDates(xDrivingData, moment().subtract(7, 'd'), moment()).length) + " km"

        let headerText = "Detaljerad rapport förare: Kalle Kula";
        var config = {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: "Antal kunder",
                        data: xCustomerData,
                        borderColor: "#3e95cd",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                    {
                        label: "Antal kilo",
                        data: xKiloData,
                        borderColor: "#8e5ea2",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                    {
                        type: 'line',
                        label: "Kördistans",
                        data: xDrivingData,
                        borderColor: "#3cba9f",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                ]
            },
            backgroundColor: 'rgba(0, 117, 204, 0.8)',
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: headerText
                },
                scales: {
                    bounds: 'data',
                    xAxes: [{
                        ticks: {
                            distribution: 'linear'
                        },
                        type: "time",
                        time: {
                            unit: 'day',
                            format: timeFormat,
                            min: new Date().fp_incr(-6),
                            max: new Date()
                        },

                        /* distribution: 'series', May be needed in big date differences*/
                        scaleLabel: {
                            barPercentage: 0.5,
                            display: true,
                            labelString: 'Datum'
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Antal'
                        }
                    }]
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById("MainCanvas").getContext("2d");
            window.myLine = new Chart(ctx, config);
        };
    </script>
}