@{
    ViewData["Title"] = "Statistik för dagen";
}

<div class="container-flow">
    <div class="row">
        <h6>Visa data</h6>
        <div>
            <div style="padding-left: 20px;" class="group">
                <label class="input-label">Från</label>
                <input type="text" id="calendar-from-graphs-dashboard">
                <span class="bar"></span>
            </div>
            <div style="padding-left: 30px;" class="group">
                <label class="input-label">Till</label>
                <input type="text" id="calendar-to-graphs-dashboard">
                <span class="bar"></span>
            </div>
        </div>
    </div>
    <div class="row ">
        <div class="col-8">
            <canvas id="mainDataBar"></canvas>
        </div>
        <div class="col-4">
            <canvas id="percentageWithing5MinOfTimeSlot"></canvas>
            <canvas id="percentageWithing15MinOfCustomerEstimatedTime"></canvas>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/emn178/chartjs-plugin-labels/src/chartjs-plugin-labels.js"></script>
    <script>
        fromDate = moment();
        toDate = moment();
        let data = {
            "labelTitle": "",
            "numberOfValidDeliveries": 0,
            "numberOfValidDeliveriesLeft": 0,
            "customersWithinTimeSlot": 0,
            "customersWithinPrognosis": 0,
            "customersBeforeTimeSlot": 0,
            "customersBeforeEstimatedTime": 0,
            "percentageWithing5MinOfTimeSlot": 0,
            "percentageWithing15MinOfCustomerEstimatedTime": 0
        };

        function reloadGraphs(array) {
            generateMainDatasetFromApiResponse(array);
            generateMainDatasetFromApiResponsePieGraphOne(array);
            generateMainDatasetFromApiResponsePieGraphTwo(array);
        }

        function generateMainDatasetFromApiResponse(array) {

            deleteAllDatasetsOnChart(window.mainChart);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            array.forEach(dataRow => {
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        "rgba(255, 159, 64, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                        "rgba(54, 162, 235, 0.2)",
                        "rgba(153, 102, 255, 0.2)",
                        "rgba(255, 205, 86, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                    ],
                    data: [
                        dataRow.numberOfValidDeliveries,
                        dataRow.numberOfValidDeliveriesLeft,
                        dataRow.customersWithinTimeSlot,
                        dataRow.customersWithinPrognosis,
                        dataRow.customersBeforeTimeSlot,
                        dataRow.customersBeforeEstimatedTime
                    ],
                    fill: false,
                    borderColor: [
                        "rgb(255, 159, 64)",
                        "rgb(255, 99, 132)",
                        "rgb(54, 162, 235)",
                        "rgb(153, 102, 255)",
                        "rgb(255, 205, 86)",
                        "rgb(255, 99, 132)"],
                    borderWidth: 1,
                }

                window.mainChart.data.datasets.push(newDataset);
            });

            updateChartReference(window.mainChart);
        }

        function generateMainDatasetFromApiResponsePieGraphOne(array) {

            deleteAllDatasetsOnChart(window.percTimeSlot);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            array.forEach(dataRow => {
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        "rgba(75, 192, 192, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                    ],
                    data: [
                        dataRow.percentageWithing5MinOfTimeSlot,
                        100 - dataRow.percentageWithing5MinOfTimeSlot
                    ],
                    fill: false,
                    borderColor: ["rgb(75, 192, 192)", "rgb(255, 99, 132)"],
                    borderWidth: 1,
                }

                window.percTimeSlot.data.datasets.push(newDataset);
            });

            updateChartReference(window.percTimeSlot);
        }

        function generateMainDatasetFromApiResponsePieGraphTwo(array) {

            deleteAllDatasetsOnChart(window.percEstTime);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            array.forEach(dataRow => {
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        "rgba(75, 192, 192, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                    ],
                    data: [
                        dataRow.percentageWithing15MinOfCustomerEstimatedTime,
                        100 - dataRow.percentageWithing15MinOfCustomerEstimatedTime
                    ],
                    fill: false,
                    borderColor: ["rgb(75, 192, 192)", "rgb(255, 99, 132)"],
                    borderWidth: 1,
                }

                window.percEstTime.data.datasets.push(newDataset);
            });

            updateChartReference(window.percEstTime);
        }

        function getData() {
            $.ajax({
                type: "GET",
                url: "/api/Analyze/GetTodayGraphs",
                data: {
                    "fromDate": function () { return fromDate.format(timeFormat) },
                    "toDate": function () { return toDate.format(timeFormat) }
                },
                success: function (responseData) {
                    data = responseData;
                    reloadGraphs(responseData);
                }
            });
        }

        window.onload = function () {
            getData();

            var ctx1 = document.getElementById('mainDataBar').getContext('2d');
            window.mainChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: [0, 0, 0, 0, 0, 0],
                        label: ''
                    },
                    ],
                    labels: [
                        "Antal leveranser",
                        "Olevererade leveranser",
                        "Leveranser inom tidsfönster +-5",
                        "Leveranser inom beräknad leveranstid +-15",
                        "Leveranser före tidsfönster -5",
                        "Leveranser före beräknad tid -15",
                    ]
                },
                options: {
                    plugins: {
                        labels: {
                            render: 'value',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });

            var ctx2 = document.getElementById('percentageWithing15MinOfCustomerEstimatedTime').getContext('2d');
            window.percEstTime = new Chart(ctx2, {
                type: 'pie',

                data: {
                    datasets: [{
                        data: [0, 0],
                        //data: [data.percentageWithing15MinOfCustomerEstimatedTime, 100 - data.percentageWithing15MinOfCustomerEstimatedTime],
                        fill: false,

                        borderColor: ["rgb(75, 192, 192)", "rgb(255, 99, 132)"],
                        borderWidth: 1,
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                            "rgba(255, 99, 132, 0.2)",
                        ],
                        label: 'Leverans beräknad leveranstid +- 15 minuter'
                    }],
                    labels: [
                        "Inom beräknad leveranstid +- 15 minuter",
                        "Ej Inom beräknad leveranstid +- 15 minuter",
                    ]
                },

                options: {
                    plugins: {
                        labels: {
                            render: 'percentage',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });

            var ctx3 = document.getElementById('percentageWithing5MinOfTimeSlot').getContext('2d');
            window.percTimeSlot = new Chart(ctx3, {
                type: 'pie',

                data: {
                    datasets: [{
                        data: [0, 0],
                        data: [data.percentageWithing5MinOfTimeSlot, 100 - data.percentageWithing5MinOfTimeSlot],
                        fill: false,

                        borderColor: ["rgb(75, 192, 192)", "rgb(255, 99, 132)"],
                        borderWidth: 1,
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                            "rgba(255, 99, 132, 0.2)",
                        ],
                        label: 'Leveranser inom tidsfönster +- 5 minuter'
                    }],
                    labels: [
                        "Inom Tidsfönster +- 5 minuter",
                        "Ej Inom Tidsfönster +- 5 minuter",
                    ]
                },
                options: {
                    plugins: {
                        labels: {
                            render: 'percentage',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });
        };
    </script>
}