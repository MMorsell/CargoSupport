@{
    ViewData["Title"] = "Statistik för dagen";
}

<div class="container-flow">
    <div class="row">
        <div class="col-4">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from-graphs-dashboard">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to-graphs-dashboard">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-4">
            <h6>Dela datan på varje order</h6>
            <input type="checkbox" id="split-data" onclick="getDataBetweenDates(todayGraphs)" class="checkbox" />
        </div>
        <div class="col-4">
        </div>
    </div>
    <div class="row ">
        <div class="col-4">
            <canvas id="percentageWithin5MinOfTimeSlot"></canvas>
        </div>
        <div class="col-4">
            <canvas id="percentageWithin15MinOfCustomerEstimatedTime"></canvas>
        </div>
        <div class="col-4">
            <canvas id="percentageWithin5MinutesOfStartTime"></canvas>
        </div>
    </div>
    <div class="row ">
        <div class="col-12">
            <canvas id="mainDataBar"></canvas>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/chart/js/chartjs-plugin-labels.js" asp-append-version="true"></script>
    <script>
        const mainApiEndpoint = todayGraphs;
        fromDate = moment();
        toDate = moment();
        let percentageWithin5MinOfTimeSlotRef;
        let percentageWithin15MinOfCustomerEstimatedTimeRef;
        let percentageWithin5MinutesOfStartTimeRef;

        function reloadGraphs(returnData) {
            generateMainDatasetFromApiResponse(returnData);
            generateMainDatasetFromApiResponsePieGraphOne(returnData);
            generateMainDatasetFromApiResponsePieGraphTwo(returnData);
            generateMainDatasetFromApiResponsePieGraphThree(returnData)
        }

        function generateMainDatasetFromApiResponse(returnData) {

            deleteAllDatasetsOnChart(window.mainChart);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            colorIndex = -1;
            returnData.forEach(dataRow => {
                colorIndex++;
                if (colorIndex > AllColors.rgba.length - 1) {
                    colorIndex = 0;
                }
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                        getrgbaColorWithOpacity(colorIndex, 0.2),
                    ],
                    data: [
                        dataRow.numberOfValidDeliveries,
                        dataRow.numberOfValidDeliveriesLeft,
                        dataRow.customersWithinTimeSlot,
                        dataRow.customersWithinPrognosis,
                        dataRow.customersBeforeTimeSlot,
                        dataRow.customersBeforeEstimatedTime,
                        dataRow.customersDividedByWorkHours,
                    ],
                    fill: false,
                    borderColor: [
                        getrgbColor(colorIndex),
                        getrgbColor(colorIndex),
                        getrgbColor(colorIndex),
                        getrgbColor(colorIndex),
                        getrgbColor(colorIndex),
                        getrgbColor(colorIndex)],
                    borderWidth: 1,
                }

                window.mainChart.data.datasets.push(newDataset);
            });

            updateChartReference(window.mainChart);
        }

        function generateMainDatasetFromApiResponsePieGraphOne(returnData) {

            deleteAllDatasetsOnChart(percentageWithin5MinOfTimeSlotRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            let percentageWithin5MinOfTimeSlot = [];
            let percentageWithin5MinOfTimeSlotRemainder = [];
            let allLabels = [];

            returnData.forEach(dataRow => {
                allLabels.push(dataRow.labelTitle);
                percentageWithin5MinOfTimeSlot.push(dataRow.percentageWithin5MinOfTimeSlot);
                percentageWithin5MinOfTimeSlotRemainder.push(100 - dataRow.percentageWithin5MinOfTimeSlot);
            });

            deleteAllDatasetsOnChart(percentageWithin5MinOfTimeSlotRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            const accuracyDataSet = {
                label: "Inom tidsfönster +- 5 minuter",
                backgroundColor: [
                    "rgba(75, 192, 192, 0.2)",
                ],
                data:
                    percentageWithin5MinOfTimeSlot,
                fill: "start",
                borderColor: ["rgb(75, 192, 192)"],
                borderWidth: 1,
            }

            const inAccuracyDataSet = {
                label: "Ej inom tidsfönster +- 5 minuter",
                backgroundColor: [
                    "rgba(255, 99, 132, 0.2)",
                ],
                data:
                    percentageWithin5MinOfTimeSlotRemainder,
                fill: "start",
                borderColor: ["rgb(255, 99, 132)"],
                borderWidth: 1,
            }
            percentageWithin5MinOfTimeSlotRef.data.labels = allLabels;
            percentageWithin5MinOfTimeSlotRef.data.datasets.push(accuracyDataSet);
            percentageWithin5MinOfTimeSlotRef.data.datasets.push(inAccuracyDataSet);

            updateChartReference(percentageWithin5MinOfTimeSlotRef);
        }

        function generateMainDatasetFromApiResponsePieGraphTwo(returnData) {

            deleteAllDatasetsOnChart(percentageWithin15MinOfCustomerEstimatedTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            let percentageWithin15MinOfCustomerEstimatedTime = [];
            let percentageWithin15MinOfCustomerEstimatedTimeRemainder = [];
            let allLabels = [];

            returnData.forEach(dataRow => {
                allLabels.push(dataRow.labelTitle);
                percentageWithin15MinOfCustomerEstimatedTime.push(dataRow.percentageWithin15MinOfCustomerEstimatedTime);
                percentageWithin15MinOfCustomerEstimatedTimeRemainder.push(100 - dataRow.percentageWithin15MinOfCustomerEstimatedTime);
            });

            deleteAllDatasetsOnChart(percentageWithin15MinOfCustomerEstimatedTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            const accuracyDataSet = {
                label: "Inom beräknad leveranstid +- 15 minuter",
                backgroundColor: [
                    "rgba(75, 192, 192, 0.2)",
                ],
                data:
                    percentageWithin15MinOfCustomerEstimatedTime,
                fill: "start",
                borderColor: ["rgb(75, 192, 192)"],
                borderWidth: 1,
            }

            const inAccuracyDataSet = {
                label: "Ej Inom beräknad leveranstid +- 15 minuter",
                backgroundColor: [
                    "rgba(255, 99, 132, 0.2)",
                ],
                data:
                    percentageWithin15MinOfCustomerEstimatedTimeRemainder,
                fill: "start",
                borderColor: ["rgb(255, 99, 132)"],
                borderWidth: 1,
            }
            percentageWithin15MinOfCustomerEstimatedTimeRef.data.labels = allLabels;
            percentageWithin15MinOfCustomerEstimatedTimeRef.data.datasets.push(accuracyDataSet);
            percentageWithin15MinOfCustomerEstimatedTimeRef.data.datasets.push(inAccuracyDataSet);

            updateChartReference(percentageWithin15MinOfCustomerEstimatedTimeRef);
        }

        function generateMainDatasetFromApiResponsePieGraphThree(returnData) {

            deleteAllDatasetsOnChart(percentageWithin5MinutesOfStartTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            let percentageWithin5MinutesOfStartTime = [];
            let percentageWithin5MinutesOfStartTimeRemainder = [];
            let allLabels = [];

            returnData.forEach(dataRow => {
                allLabels.push(dataRow.labelTitle);
                percentageWithin5MinutesOfStartTime.push(dataRow.percentageWithin5MinutesOfStartTime);
                percentageWithin5MinutesOfStartTimeRemainder.push(100 - dataRow.percentageWithin5MinutesOfStartTime);
            });

            deleteAllDatasetsOnChart(percentageWithin5MinutesOfStartTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            const accuracyDataSet = {
                label: "Tur startad i tid +5 minuter",
                backgroundColor: [
                    "rgba(75, 192, 192, 0.2)",
                ],
                data:
                    percentageWithin5MinutesOfStartTime,
                fill: "start",
                borderColor: ["rgb(75, 192, 192)"],
                borderWidth: 1,
            }

            const inAccuracyDataSet = {
                label: "Ej startad i tid +5 minuter",
                backgroundColor: [
                    "rgba(255, 99, 132, 0.2)",
                ],
                data:
                    percentageWithin5MinutesOfStartTimeRemainder,
                fill: "start",
                borderColor: ["rgb(255, 99, 132)"],
                borderWidth: 1,
            }
            percentageWithin5MinutesOfStartTimeRef.data.labels = allLabels;
            percentageWithin5MinutesOfStartTimeRef.data.datasets.push(accuracyDataSet);
            percentageWithin5MinutesOfStartTimeRef.data.datasets.push(inAccuracyDataSet);

            updateChartReference(percentageWithin5MinutesOfStartTimeRef);
        }

        window.onload = function () {

            var ctx1 = document.getElementById('mainDataBar').getContext('2d');
            window.mainChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: [0, 0, 0, 0, 0, 0],
                        label: ''
                    },
                    ],
                    labels: [
                        "Antal levererade leveranser",
                        "Olevererade leveranser",
                        "Leveranser inom tidsfönster +-5",
                        "Leveranser inom beräknad leveranstid +-15",
                        "Leveranser före tidsfönster -5",
                        "Leveranser före beräknad tid -15",
                        "Leveranser/timmar (Endast turtimmar inräknat)",
                    ]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leveransstatistiken baseras på antal leveranser som är genomförda'
                    },
                    plugins: {
                        labels: {
                            render: 'value',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });

            let configBase1 = {
                type: 'line',
                data: {
                    labels: ["2020-08-27"],
                    datasets: [{
                        label: 'Chart 1',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(75, 192, 192)"],
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                        ],
                    }, {
                        label: 'Chart 2',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(255, 99, 132)"],
                        backgroundColor: [
                            "rgba(255, 99, 132, 0.2)",
                        ],
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leverans beräknad leveranstid +- 15 minuter'
                    },
                    scales: {
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Procent'
                            },
                        }]
                    }
                }
            };
            let ctx2 = document.getElementById('percentageWithin15MinOfCustomerEstimatedTime').getContext('2d');
            percentageWithin15MinOfCustomerEstimatedTimeRef = new Chart(ctx2, configBase1);

            let configBase2 = {
                type: 'line',
                data: {
                    labels: ["2020-08-27"],
                    datasets: [{
                        label: 'Chart 1',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(75, 192, 192)"],
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                        ],
                    }, {
                        label: 'Chart 2',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(255, 99, 132)"],
                        backgroundColor: [
                            "rgba(255, 99, 132, 0.2)",
                        ],
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leveranser inom tidsfönster +- 5 minuter'
                    },
                    scales: {
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Procent'
                            },
                        }]
                    }
                }
            };
            let ctx3 = document.getElementById('percentageWithin5MinOfTimeSlot').getContext('2d');
            percentageWithin5MinOfTimeSlotRef = new Chart(ctx3, configBase2);

            let configBase3 = {
                type: 'line',
                data: {
                    labels: ["2020-08-27"],
                    datasets: [{
                        label: 'Chart 1',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(75, 192, 192)"],
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                        ],
                    }, {
                        label: 'Chart 2',
                        data: [0],
                        fill: "start",
                        borderColor: ["rgb(255, 99, 132)"],
                        backgroundColor: [
                            "rgba(255, 99, 132, 0.2)",
                        ],
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Tur startad i tid +5 minuter'
                    },
                    scales: {
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Procent'
                            },
                        }]
                    }
                }
            };
            let ctx4 = document.getElementById('percentageWithin5MinutesOfStartTime').getContext('2d');
            percentageWithin5MinutesOfStartTimeRef = new Chart(ctx4, configBase3);

            getDataBetweenDates(todayGraphs);
        };
    </script>
}