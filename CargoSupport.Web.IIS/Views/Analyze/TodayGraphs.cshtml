@{
    ViewData["Title"] = "Statistik för dagen";
}

<div class="container-flow">
    <div class="row">
        <div class="col-4">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from-graphs-dashboard">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to-graphs-dashboard">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-4">
            <h6>Dela datan på varje order</h6>
            <input type="checkbox" id="split-data" onclick="getDataBetweenDates(todayGraphs)" class="checkbox" />
        </div>
        <div class="col-4">
        </div>
    </div>
    <div class="row ">
        <div class="col-8">
            <canvas id="mainDataBar"></canvas>
        </div>
        <div class="col-4">
            <canvas id="percentageWithing5MinOfTimeSlot"></canvas>
            <canvas id="percentageWithing15MinOfCustomerEstimatedTime"></canvas>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/emn178/chartjs-plugin-labels/src/chartjs-plugin-labels.js"></script>
    <script>
        const mainApiEndpoint = todayGraphs;
        fromDate = moment();
        toDate = moment();
        let percentageWithing5MinOfTimeSlotRef;
        let percentageWithing15MinOfCustomerEstimatedTimeRef;

        function reloadGraphs(returnData) {
            generateMainDatasetFromApiResponse(returnData);
            generateMainDatasetFromApiResponsePieGraphOne(returnData);
            generateMainDatasetFromApiResponsePieGraphTwo(returnData);
        }

        function generateMainDatasetFromApiResponse(returnData) {

            deleteAllDatasetsOnChart(window.mainChart);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            returnData.forEach(dataRow => {
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        "rgba(255, 159, 64, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                        "rgba(54, 162, 235, 0.2)",
                        "rgba(153, 102, 255, 0.2)",
                        "rgba(255, 205, 86, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                    ],
                    data: [
                        dataRow.numberOfValidDeliveries,
                        dataRow.numberOfValidDeliveriesLeft,
                        dataRow.customersWithinTimeSlot,
                        dataRow.customersWithinPrognosis,
                        dataRow.customersBeforeTimeSlot,
                        dataRow.customersBeforeEstimatedTime
                    ],
                    fill: false,
                    borderColor: [
                        "rgb(255, 159, 64)",
                        "rgb(255, 99, 132)",
                        "rgb(54, 162, 235)",
                        "rgb(153, 102, 255)",
                        "rgb(255, 205, 86)",
                        "rgb(255, 99, 132)"],
                    borderWidth: 1,
                }

                window.mainChart.data.datasets.push(newDataset);
            });

            updateChartReference(window.mainChart);
        }

        function generateMainDatasetFromApiResponsePieGraphOne(returnData) {

            deleteAllDatasetsOnChart(percentageWithing5MinOfTimeSlotRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            let percentageWithing5MinOfTimeSlot = [];
            let percentageWithing5MinOfTimeSlotRemainder = [];
            let allLabels = [];

            returnData.forEach(dataRow => {
                allLabels.push(dataRow.labelTitle);
                percentageWithing5MinOfTimeSlot.push(dataRow.percentageWithing5MinOfTimeSlot);
                percentageWithing5MinOfTimeSlotRemainder.push(100 - dataRow.percentageWithing5MinOfTimeSlot);
            });

            deleteAllDatasetsOnChart(percentageWithing5MinOfTimeSlotRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            const accuracyDataSet = {
                label: "Inom tidsfönster +- 5 minuter",
                backgroundColor: [
                    "rgba(75, 192, 192, 0.2)",
                ],
                data:
                    percentageWithing5MinOfTimeSlot,
                fill: "start",
                borderColor: ["rgb(75, 192, 192)"],
                borderWidth: 1,
            }

            const inAccuracyDataSet = {
                label: "Ej inom tidsfönster +- 5 minuter",
                backgroundColor: [
                    "rgba(255, 99, 132, 0.2)",
                ],
                data:
                    percentageWithing5MinOfTimeSlotRemainder,
                fill: "start",
                borderColor: ["rgb(255, 99, 132)"],
                borderWidth: 1,
            }
            percentageWithing5MinOfTimeSlotRef.data.labels = allLabels;
            percentageWithing5MinOfTimeSlotRef.data.datasets.push(accuracyDataSet);
            percentageWithing5MinOfTimeSlotRef.data.datasets.push(inAccuracyDataSet);

            updateChartReference(percentageWithing5MinOfTimeSlotRef);
        }

        function generateMainDatasetFromApiResponsePieGraphTwo(returnData) {

            deleteAllDatasetsOnChart(percentageWithing15MinOfCustomerEstimatedTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            let percentageWithing15MinOfCustomerEstimatedTime = [];
            let percentageWithing15MinOfCustomerEstimatedTimeRemainder = [];
            let allLabels = [];

            returnData.forEach(dataRow => {
                allLabels.push(dataRow.labelTitle);
                percentageWithing15MinOfCustomerEstimatedTime.push(dataRow.percentageWithing15MinOfCustomerEstimatedTime);
                percentageWithing15MinOfCustomerEstimatedTimeRemainder.push(100 - dataRow.percentageWithing15MinOfCustomerEstimatedTime);
            });

            deleteAllDatasetsOnChart(percentageWithing15MinOfCustomerEstimatedTimeRef);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            const accuracyDataSet = {
                label: "Inom beräknad leveranstid +- 15 minuter",
                backgroundColor: [
                    "rgba(75, 192, 192, 0.2)",
                ],
                data:
                    percentageWithing15MinOfCustomerEstimatedTime,
                fill: "start",
                borderColor: ["rgb(75, 192, 192)"],
                borderWidth: 1,
            }

            const inAccuracyDataSet = {
                label: "Ej Inom beräknad leveranstid +- 15 minuter",
                backgroundColor: [
                    "rgba(255, 99, 132, 0.2)",
                ],
                data:
                    percentageWithing15MinOfCustomerEstimatedTimeRemainder,
                fill: "start",
                borderColor: ["rgb(255, 99, 132)"],
                borderWidth: 1,
            }
            percentageWithing15MinOfCustomerEstimatedTimeRef.data.labels = allLabels;
            percentageWithing15MinOfCustomerEstimatedTimeRef.data.datasets.push(accuracyDataSet);
            percentageWithing15MinOfCustomerEstimatedTimeRef.data.datasets.push(inAccuracyDataSet);

            updateChartReference(percentageWithing15MinOfCustomerEstimatedTimeRef);
        }

        window.onload = function () {

            var ctx1 = document.getElementById('mainDataBar').getContext('2d');
            window.mainChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: [0, 0, 0, 0, 0, 0],
                        label: ''
                    },
                    ],
                    labels: [
                        "Antal leveranser",
                        "Olevererade leveranser",
                        "Leveranser inom tidsfönster +-5",
                        "Leveranser inom beräknad leveranstid +-15",
                        "Leveranser före tidsfönster -5",
                        "Leveranser före beräknad tid -15",
                    ]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leveransstatistiken baseras på antal leveranser som är genomförda'
                    },
                    plugins: {
                        labels: {
                            render: 'value',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });

            let configBase1 = {
                type: 'line',
                data: {
                    labels: ["2020-08-27", "2020-08-28", "2020-08-29", "2020-08-30"],
                    datasets: [{
                        label: 'Chart 1',
                        data: [81.58999999999999, 87.26, 97.27, 85.38],
                        fill: "start",
                        borderColor: ["rgb(75, 192, 192)"],
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                        ],
                    }, {
                        label: 'Chart 2',
                        data: [18.41000000000001, 12.739999999999995, 2.730000000000004, 14.620000000000005],
                        fill: "start",
                        borderColor: ["rgb(255, 99, 132)"],
                        backgroundColor: [
                            "rgba(255, 99, 132, 0.2)",
                        ],
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leverans beräknad leveranstid +- 15 minuter'
                    },
                    scales: {
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Procent'
                            },
                        }]
                    }
                }
            };
            let ctx2 = document.getElementById('percentageWithing15MinOfCustomerEstimatedTime').getContext('2d');
            percentageWithing15MinOfCustomerEstimatedTimeRef = new Chart(ctx2, configBase1);

            let configBase2 = {
                type: 'line',
                data: {
                    labels: ["2020-08-27", "2020-08-28", "2020-08-29", "2020-08-30"],
                    datasets: [{
                        label: 'Chart 1',
                        data: [81.58999999999999, 87.26, 97.27, 85.38],
                        fill: "start",
                        borderColor: ["rgb(75, 192, 192)"],
                        backgroundColor: [
                            "rgba(75, 192, 192, 0.2)",
                        ],
                    }, {
                        label: 'Chart 2',
                        data: [18.41000000000001, 12.739999999999995, 2.730000000000004, 14.620000000000005],
                        fill: "start",
                        borderColor: ["rgb(255, 99, 132)"],
                        backgroundColor: [
                            "rgba(255, 99, 132, 0.2)",
                        ],
                    }]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leveranser inom tidsfönster +- 5 minuter'
                    },
                    scales: {
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Procent'
                            },
                        }]
                    }
                }
            };
            let ctx3 = document.getElementById('percentageWithing5MinOfTimeSlot').getContext('2d');
            percentageWithing5MinOfTimeSlotRef = new Chart(ctx3, configBase2);

            getDataBetweenDates(todayGraphs);
        };
    </script>
}