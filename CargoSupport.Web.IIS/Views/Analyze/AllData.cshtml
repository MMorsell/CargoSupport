@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Analyze";
}

<div class="text-center">
    <div class="row">
        <p></p>
    </div>
    <div class="row">
        <div class="col-sm">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-sm">
        </div>
        <div class="col-sm">
            <div>
                <h6 id="SelectedAvrWeight"></h6>
            </div>
            <br>
            <div>
                <h6 id="SelectedAvrCustomers"></h6>
            </div>
            <br>
            <div>
                <h6 id="SelectedAvrDistance"></h6>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-8">
            <canvas id="MainCanvas"></canvas>
        </div>
        <div class="col-sm-4">
            <div id="mapid" style="height: 800px;"></div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/js/Leaflet-icons.js" asp-append-version="true"></script>
    <script>
        const data = @Html.Raw(ViewBag.DataTable)

        document.getElementById("SelectedAvrWeight").innerText = 'Veckans vikt/tur: ' + data.SlimViewModel.AvrWeight;
        document.getElementById("SelectedAvrCustomers").innerText = 'Veckans kunder/tur: ' + data.SlimViewModel.AvrCustomers;
        document.getElementById("SelectedAvrDistance").innerText = 'Veckans kördistans/tur: ' + data.SlimViewModel.AvrDrivingDistance;

        flatpickr('#calendar-from', {
            "locale": "sv",
            "maxDate": new Date(),
            defaultDate: new Date().fp_incr(-6),
            onChange: function (selectedDates, dateStr, instance) {
                fromDate = moment(dateStr, timeFormat);
                window.myLine.options.scales.xAxes[0].time.min = dateStr;
                window.myLine.update();
                updateAverage();
                addCustomersToMap()
            }
        });
        flatpickr('#calendar-to', {
            "locale": "sv",
            "maxDate": new Date(),
            defaultDate: "today",
            onChange: function (selectedDates, dateStr, instance) {
                toDate = moment(dateStr, timeFormat);
                window.myLine.options.scales.xAxes[0].time.max = dateStr;
                window.myLine.update();
                updateAverage();
                addCustomersToMap();
            }
        });

        function calculateAvr(arrayWithData, divisionWith) {
            return Math.round(getYSum(arrayWithData) / divisionWith);
        }

        function getYSum(arrayWithData) {
            var sum = 0;
            for (var i = 0; i < arrayWithData.length; i++) {
                sum += parseInt(arrayWithData[i].y);
            }
            return sum;
        }

        function getDataBetweenTwoDates(arrayWithData, fromDate, toDate) {

            var arrayWithDataThatMatches = [];
            for (var i = 0; i < arrayWithData.length; i++) {

                let currentDate = moment(arrayWithData[i].x);

                if (currentDate.isBetween(fromDate, toDate)) {
                    arrayWithDataThatMatches.push(arrayWithData[i])
                }
            }
            return arrayWithDataThatMatches;
        }

        let colorIconIndex = 0;
        function getIconColor(data, dataIndex) {
            if (dataIndex === 0) {
                return allIconColors[0];
            }

            if (data[dataIndex].x === data[dataIndex - 1].x) {
                return allIconColors[colorIconIndex];
            }
            else {
                if (colorIconIndex < allIconColors.length) {
                    colorIconIndex += 1;
                    return allIconColors[colorIconIndex];
                }
                else {
                    return allIconColors[colorIconIndex];
                }
            }

        }

        function convertStringToDate(date) {
            var splittedDate = date.split('-');
            return new Date(splittedDate[2], parseInt(splittedDate[1]) - 1, splittedDate[0]);
        }

        var map = L.map('mapid');
        L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        map.setView([59.4293, 18.0686], 10);
        var markersLayer = new L.LayerGroup();

        function addCustomersToMap() {
            colorIconIndex = 0;
            markersLayer.clearLayers();

            let matchingData = getDataBetweenTwoDates(data.CustomerPositionData, fromDate, toDate)
            let marker;
            //allIconColors
            for (var i = 0; i < matchingData.length; i++) {

                marker = L.marker([matchingData[i].y, matchingData[i].z], { icon: getIconColor(matchingData, i) })
                    .bindPopup('Datum för leverans: ' + matchingData[i].x)

                markersLayer.addLayer(marker);
            }
        }

        addCustomersToMap()
        markersLayer.addTo(map);

        function updateAverage() {
            document.getElementById('SelectedAvrWeight').innerText = "Vikt/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(data.KiloData, fromDate, toDate), getDataBetweenTwoDates(data.KiloData, fromDate, toDate).length) + " kg"
            document.getElementById('SelectedAvrCustomers').innerText = "Kunder/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(data.CustomerPositionData, fromDate, toDate), getDataBetweenTwoDates(data.CustomerPositionData, fromDate, toDate).length) + " kunder"
            document.getElementById('SelectedAvrDistance').innerText = "Kördistans/tur mellan valda datum: " + calculateAvr(getDataBetweenTwoDates(data.DistanceData, fromDate, toDate), getDataBetweenTwoDates(data.DistanceData, fromDate, toDate).length) + " km"
        }

        let headerText = "Detaljerad rapport förare: " + data.SlimViewModel.DriverFullName;
        var config = {
            type: 'line',
            data: {
                datasets: [
                    {
                        label: "Antal kunder",
                        data: data.CustomersData,
                        borderColor: "#3e95cd",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                    {
                        label: "Antal kilo",
                        data: data.KiloData,
                        borderColor: "#8e5ea2",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                    {
                        type: 'line',
                        label: "Kördistans",
                        data: data.DistanceData,
                        borderColor: "#3cba9f",
                        fill: false,
                        cubicInterpolationMode: 'monotone'
                    },
                ]
            },
            backgroundColor: 'rgba(0, 117, 204, 0.8)',
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: headerText
                },
                scales: {
                    bounds: 'data',
                    xAxes: [{
                        ticks: {
                            distribution: 'linear'
                        },
                        type: "time",
                        time: {
                            unit: 'day',
                            format: timeFormat,
                            min: new Date().fp_incr(-6),
                            max: new Date()
                        },

                        /* distribution: 'series', May be needed in big date differences*/
                        scaleLabel: {
                            barPercentage: 0.5,
                            display: true,
                            labelString: 'Datum'
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Antal'
                        }
                    }]
                }
            }
        };

        window.onload = function () {
            var ctx = document.getElementById("MainCanvas").getContext("2d");
            window.myLine = new Chart(ctx, config);
        };
    </script>
}