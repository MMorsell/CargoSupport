@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Föraranalys";
}

<div class="container-flow">
    <div class="row">
        <div class="col-4">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from-graphs-dashboard">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to-graphs-dashboard">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-4">
        </div>
        <div class="col-4">
        </div>
    </div>
    <div class="row ">
        <div class="col-8">
            <canvas id="mainDataBar"></canvas>
        </div>
        <div class="col-4">
            <canvas id="percentageWithing5MinOfTimeSlot"></canvas>
            <canvas id="percentageWithing15MinOfCustomerEstimatedTime"></canvas>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const mainApiEndpoint = driverExtendedStats + '?fromDate=2020-08-27&toDate=2020-08-31&reportingTo=9006';
        fromDate = moment();
        toDate = moment();

        function reloadGraphs(returnData) {
            generateMainDatasetFromApiResponse(returnData);
        }

        function generateMainDatasetFromApiResponse(returnData) {

            deleteAllDatasetsOnChart(window.mainChart);

            /*
             * Generates new datasets based on returned data and pushes the changes
             */
            returnData.forEach(dataRow => {
                var newDataset = {
                    label: dataRow.labelTitle,
                    backgroundColor: [
                        "rgba(255, 159, 64, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                        "rgba(54, 162, 235, 0.2)",
                        "rgba(153, 102, 255, 0.2)",
                        "rgba(255, 205, 86, 0.2)",
                        "rgba(255, 99, 132, 0.2)",
                    ],
                    data: [
                        dataRow.numberOfValidDeliveries,
                        dataRow.numberOfValidDeliveriesLeft,
                        dataRow.customersWithinTimeSlot,
                        dataRow.customersWithinPrognosis,
                        dataRow.customersBeforeTimeSlot,
                        dataRow.customersBeforeEstimatedTime
                    ],
                    fill: false,
                    borderColor: [
                        "rgb(255, 159, 64)",
                        "rgb(255, 99, 132)",
                        "rgb(54, 162, 235)",
                        "rgb(153, 102, 255)",
                        "rgb(255, 205, 86)",
                        "rgb(255, 99, 132)"],
                    borderWidth: 1,
                }

                window.mainChart.data.datasets.push(newDataset);
            });

            updateChartReference(window.mainChart);
        }

        window.onload = function () {
            var ctx1 = document.getElementById('mainDataBar').getContext('2d');
            window.mainChart = new Chart(ctx1, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: [0, 0, 0, 0, 0, 0],
                        label: ''
                    },
                    ],
                    labels: [
                        "Antal leveranser",
                        "Olevererade leveranser",
                        "Leveranser inom tidsfönster +-5",
                        "Leveranser inom beräknad leveranstid +-15",
                        "Leveranser före tidsfönster -5",
                        "Leveranser före beräknad tid -15",
                    ]
                },
                options: {
                    title: {
                        display: true,
                        text: 'Leveransstatistiken baseras på antal leveranser som är genomförda'
                    },
                    plugins: {
                        labels: {
                            render: 'value',
                            fontSize: 20,
                            position: 'outside',
                            textMargin: 10,
                        }
                    }
                }
            });
            getDataBetweenDates(driverExtendedStats);
        }
    </script>
}