@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Föraranalys";
}

<div class="container-flow">
    <div class="row">
        <div class="col-4">
            <h6>Visa data</h6>
            <div>
                <div style="padding-left: 20px;" class="group">
                    <label class="input-label">Från</label>
                    <input type="text" id="calendar-from2">
                    <span class="bar"></span>
                </div>
                <div style="padding-left: 30px;" class="group">
                    <label class="input-label">Till</label>
                    <input type="text" id="calendar-to2">
                    <span class="bar"></span>
                </div>
            </div>
        </div>
        <div class="col-4">
            <button class="btn btn-outline-info" onclick="resetTable()">Återgå till gruppvy</button>
        </div>
        <div class="col-4">
            <iframe id="txtArea1" style="display:none"></iframe>
            <button class="btn btn-outline-success" id="btnExport" onclick="fnExcelReport('dataTable');"> Exportera som excel</button>
        </div>
    </div>
    <div class="row ">
        <table id="dataTable" class="table table-striped table-bordered" style="width:100%; white-space: nowrap;">
            <thead style="position: sticky; top: 0;">
            </thead>
        </table>
    </div>
</div>

@section Scripts
{
    <script>
        const mainApiEndpoint = driverExtendedStats;
        fromDate = moment().subtract(7, 'd');
        toDate = moment();
        let reportingToId = null;
        let staffCat = null;
        let sectionId = null;

        generateFlatPickrElement("#calendar-from2", new Date(), new Date().fp_incr(-365), new Date().fp_incr(-7),
            function (selectedDates, dateStr, instance) {
                fromDate = moment(dateStr, timeFormat);
                redrawTableById(null, null);
            });

        generateFlatPickrElement("#calendar-to2", new Date(), new Date().fp_incr(-365), new Date(),
            function (selectedDates, dateStr, instance) {
                toDate = moment(dateStr, timeFormat);
                redrawTableById(null, null);
            });

        function resetTable() {
            staffCat = null;
            reportingToId = null;
            table.ajax.reload(null, false);
        }

        function redrawTableById(reportingTo, staffCatId, section) {
            if (reportingTo != null) {
                reportingToId = reportingTo;
            }

            if (staffCatId != null) {
                staffCat = staffCatId;
            }

            if (section != null) {
                sectionId = section;
            }

            table.ajax.reload(null, false);
        }

        function colorcolumns() {
            try {
                colorColumnDependingOnValue(4, true);
                colorColumnDependingOnValue(5, true);
                colorColumnDependingOnValue(6, false);
                colorColumnDependingOnValue(7, false);
                colorColumnDependingOnValue(8, true);
            } catch (e) {
                console.log(e);
            }

        }

        function getMaxValue(columnIndex) {
            let maxValue = -1;
            $('#dataTable tr').not(':first').each(function () {
                const currentCellValue = parseInt(this.cells[columnIndex].innerHTML);

                if (currentCellValue > maxValue) {
                    maxValue = currentCellValue;
                }
            });

            return maxValue;
        }

        function colorColumnDependingOnValue(columnIndex, highIsGood) {
            const maxValue = getMaxValue(columnIndex);

            $('#dataTable tr').not(':first').each(function () {
                const percentageVal = percentage(parseInt(this.cells[columnIndex].innerHTML), maxValue);

                let colorToSet;
                if (highIsGood) {
                    colorToSet = percentageToColorHighIsGood(percentageVal);
                }
                else {
                    colorToSet = percentageToColorHighIsBad(percentageVal);
                }

                this.cells[columnIndex].style.backgroundColor = colorToSet;
            });
        }

        const boss_extendedInfo = function (data, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return data;
            }
            if (full.driverId !== 0) {
                return '<a style="color: blue;cursor: pointer;text-decoration: underline" href="DriverDiscreteData/' + full.driverId + '" class="dropdown-item">' + data + '</a>';
            }
            else {
                return '<a style="color: blue;cursor: pointer;text-decoration: underline" onClick="redrawTableById(' + full.reportingTo + ',' + full.staffCatId + ',' + full.sectionId + ')">' + data + '</a>';
            }
        }

        function percentage(partialValue, totalValue) {
            return (100 * partialValue) / totalValue;
        }

        Array.prototype.max = function () {
            return Math.max.apply(null, this);
        };

        Array.prototype.min = function () {
            return Math.min.apply(null, this);
        };

        $(document).ready(function () {
            table = $('#dataTable').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    'excelHtml5',
                ],
                pageLength: 250,
                "ajax": {
                    "url": mainApiEndpoint,
                    "data": {
                        "fromDate": function () { return fromDate.format(timeFormat) },
                        "toDate": function () { return toDate.format(timeFormat) },
                        "reportingTo": function () { return reportingToId },
                        "staffCatId": function () { return staffCat },
                        "sectionId": function () { return sectionId }
                    },
                    "dataSrc": "",
                    "complete": function (responseReference, responseText) {
                        colorcolumns();
                    },
                    "error": function (responseReference, responseText) {
                    },
                },
                columnDefs: [
                    { "width": "20%", "targets": 3 }
                ],
                columns: [
                    { data: 'reportingTo', title: 'ReportingTo', "visible": false, "searchable": false },
                    { data: 'staffCatId', title: 'StaffCatId', "visible": false, "searchable": false },
                    { data: 'driverId', title: 'DriverId', "visible": false, "searchable": false },
                    { data: 'sectionId', title: 'SectionId', "visible": false, "searchable": false },
                    { data: 'labelTitle', title: 'Gruppnamn', render: boss_extendedInfo },
                    { data: 'numberOfCustomerServiceReports', title: 'Antal serviceärenden' },
                    { data: 'numberOfValidDeliveries', title: 'Genomförda leveranser' },
                    { data: 'numberOfValidDeliveriesLeft', title: 'Ej klara Leveranser' },
                    { data: 'customersWithinTimeSlot', title: 'Inom tidsfönster +-5' },
                    { data: 'customersWithinPrognosis', title: 'Inom beräknad leveranstid +-15' },
                    { data: 'customersBeforeTimeSlot', title: 'Före tidsfönster -5' },
                    { data: 'customersBeforeEstimatedTime', title: 'Före beräknad tid -15' },
                    { data: 'percentageWithin5MinOfTimeSlot', title: 'Procent inom tidsfönster +-5' },
                    { data: 'percentageWithin15MinOfCustomerEstimatedTime', title: 'Procent inom beräknad leveranstid +-15' },
                    { data: 'customerComments', title: 'Snitt nöjdskala', render: customerSatisfaction_render },
                    { data: 'customerComments', title: 'Snitt leveransen kom i tid', render: customerTiming_render },
                    { data: 'customerComments', title: 'Snitt bemötande', render: customerDriver_render },
                    { data: 'customerComments', title: 'Snitt varor', render: customerProduce_render },
                ]
            });

            $('thead th').each(function () {
                $(this).addClass("stickyHeader");
            })

        });
    </script>
}