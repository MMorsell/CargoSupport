@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Home Page";
}
<div id="main-containter" class="container-fluid">
    <div style="float: right;">
        <h3 style="display: inline-block;">Status</h3>
        <img id="errorSymbol" style="display:none" src="~/img/svg/errorSymbol.svg" />
        <img id="onlineSymbom" style="display:none" src="~/img/svg/onlineSymbol.svg" />
        <div id="connectStatus" style="display:none" class="lds-facebook"><div style="display: inline-block;"></div><div style="display: inline-block;"></div><div style="display: inline-block;"></div></div>
    </div>
    <div class="row">
        <h6>Datum</h6>
        <div>
            <div style="padding-left: 20px;" class="group">
                <input type="text" id="calendar-from">
                <span class="bar"></span>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="dataTableTabs" class="tab">
        </div>
    </div>
    <table id="dataTable" class="table table-striped table-bordered" style="width:100%; white-space: nowrap;">
        <thead>
        </thead>
    </table>
</div>

@section Scripts
{
    <script src="~/js/UpsertFunctions.js" asp-append-version="true"></script>
    <script src="~/lib/aspnet/signalr/dist/browser/signalr.js" asp-append-version="true"></script>
    <script src="~/js/chat.js" asp-append-version="true"></script>
    <script>
        let table;
        let currentTab;
        const mainApiEndpoint = '/api/v1/public/GetStorage';

        generateFlatPickrElement("#calendar-from", new Date().fp_incr(1), new Date(), new Date(), 
        function (selectedDates, dateStr, instance) {
            ajaxDate = new Date(dateStr);
            reloadDatatableAjax();
        });

        function proptForSignatureInt(thisReference) {
            var personSignature = prompt("Signatur krävs, om du väljer 'Cancel' återställs värdet utan förändring", "");

            if (personSignature == null) {
                reloadAjax();
            }
            else if (personSignature.trim() === "") {
                alert("Tom signatur godkänns ej")
                reloadAjax();
            }
            else {
                updateRow(thisReference, personSignature);
            }
        }

        function proptForSignatureBool(thisReference) {
            var personSignature = prompt("Signatur krävs, om du väljer 'Cancel' återställs värdet utan förändring", "");

            if (personSignature == null) {
                reloadAjax();
            } else if (personSignature.trim() === "") {
                alert("Tom signatur godkänns ej")
                reloadAjax();
            }
            else {
                updateRow(thisReference, personSignature);
            }
        }

        async function updateRow(thisRef, signature) {
            var dataRef = table.row($(thisRef).parents('tr')).data();
            /*
              numberOfColdBoxes: numberOfColdBoxes_input
              restPicking: restPicking_input
              numberOfFrozenBoxes: numberOfFrozenBoxes_input
              numberOfBreadBoxes: numberOfBreadBoxes_input
              controlIsDone: controlIsDone_input
             */

            let upsertDictionary = {};
            upsertDictionary["hubId"] = await connection.invoke('GetConnectionId');
            upsertDictionary["_Id"] = dataRef._Id;
            upsertDictionary['signature'] = signature;

            switch (thisRef.id) {
                case 'restPicking_input':
                case 'controlIsDone_input':
                    upsertDictionary[thisRef.id] = thisRef.checked;
                    break;
                case 'numberOfColdBoxes_input':
                case 'numberOfFrozenBoxes_input':
                case 'numberOfBreadBoxes_input':
                case 'location_input':
                    upsertDictionary[thisRef.id] = parseInt(thisRef.value);
                    break;
            }
            postUpdate(JSON.stringify(upsertDictionary), upsertDictionary);
        }

        function postUpdate(jsonData, upsertDictionary) {
            var dataType = 'application/json';
            console.log('Submitting form...');
            $.ajax({
                type: 'POST',
                url: '/api/v1/Upsert/UpsertStorage',
                //dataType: 'json',
                contentType: dataType,
                data: jsonData,
                error: function (jqXHR, exception) {
                    toggleConnectStatus('error');
                },
                success: function (result) {
                    toggleConnectStatus('ok');
                    updateSingleRecord(upsertDictionary);
                }
            });
        }

        const restPicking_input = function (data, type, full, meta) {
            var is_checked = data == true ? "checked" : "";

            return `<div class="pretty p-icon p-round p-pulse p-jelly p-bigger">
                                                                                                                                                                                                    <input type="checkbox" id="restPicking_input" onChange=proptForSignatureBool(this) ${is_checked} />
                                                                                                                                                                                                    <div class="state p-success">
                                                                                                                                                                                                        <i class="icon mdi mdi-check"></i>
                                                                                                                                                                                                        <label></label>
                                                                                                                                                                                                    </div>
                                                                                                                                                                                                </div>`;
        }

        const controlIsDone_input = function (data, type, full, meta) {
            var is_checked = data == true ? "checked" : "";

            return `<div class="pretty p-icon p-round p-pulse p-jelly p-bigger">
                                                                                                                                                                                                    <input type="checkbox" id="controlIsDone_input" onChange=proptForSignatureBool(this) ${is_checked} />
                                                                                                                                                                                                    <div class="state p-success">
                                                                                                                                                                                                        <i class="icon mdi mdi-check"></i>
                                                                                                                                                                                                        <label></label>
                                                                                                                                                                                                    </div>
                                                                                                                                                                                                </div>`;
        }

        const numberOfBreadBoxes_input = function (data, type, full, meta) {

            var selectBox = [];
            selectBox.push(
                `<div><select data-style="btn-primary" ${bootstrapSelectDropdownStyle} id="numberOfBreadBoxes_input" onChange=proptForSignatureInt(this)>`
            );

            for (i = 0; i < 100; i++) {
                if (i === data) {
                    selectBox.push('<option selected>' + i + '</option>')
                } else {
                    selectBox.push('<option>' + i + '</option>')
                }
            }
            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const location_input = function (data, type, full, meta) {
            var selectBox = [];

            //Ordinarie = 0, Dynamisk = 1
            if (data == null) {
                selectBox.push(
                    `<div>
                                         <select data-width="fit" ${bootstrapSelectDropdownStyle} id="location_input" onChange=proptForSignatureInt(this)>
                                             <option value="0">Ordinarie</option>
                                             <option value="1">Dynamisk</option>
                                         </select>
                                     </div>`
                );
            } else if (data === 0) {
                selectBox.push(
                    `<div>
                                         <select data-width="fit" data-style="btn-info" ${bootstrapSelectDropdownStyle} id="location_input" onChange=proptForSignatureInt(this)>
                                             <option value="0" selected>Ordinarie</option>
                                             <option value="1">Dynamisk</option>
                                         </select>
                                     </div>`
                );
            } else {
                selectBox.push(
                    `<div>
                                         <select data-width="fit" ${bootstrapSelectDropdownStyle} data-style="btn-danger" id="location_input" onChange=proptForSignatureInt(this)>
                                             <option value="0">Ordinarie</option>
                                             <option value="1" selected>Dynamisk</option>
                                         </select>
                                     </div>`
                );
            }

            return selectBox.join("");
        }

        const numberOfFrozenBoxes_input = function (data, type, full, meta) {

            var selectBox = [];
            selectBox.push(
                `<div><select data-style="btn-primary" ${bootstrapSelectDropdownStyle} id="numberOfFrozenBoxes_input" onChange=proptForSignatureInt(this)>`
            );

            for (i = 0; i < 100; i++) {
                if (i === data) {
                    selectBox.push('<option selected>' + i + '</option>')
                } else {
                    selectBox.push('<option>' + i + '</option>')
                }
            }
            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const numberOfColdBoxes_input = function (data, type, full, meta) {

            var selectBox = [];
            selectBox.push(
                `<div><select data-style="btn-primary" ${bootstrapSelectDropdownStyle} id="numberOfColdBoxes_input" onChange=proptForSignatureInt(this)>`
            );

            for (i = 0; i < 100; i++) {
                if (i === data) {
                    selectBox.push('<option selected>' + i + '</option>')
                } else {
                    selectBox.push('<option>' + i + '</option>')
                }
            }
            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        $(document).ready(function () {
            table = $('#dataTable').DataTable({
                pageLength: 250,
                "ajax": {
                    "url": mainApiEndpoint,
                    "data": {
                        "dateString": function () { return formatDate(ajaxDate) }
                    },
                    "dataSrc": "",
                    "complete": function (responseReference, responseText) {
                        if (responseText === "error") {
                            toggleConnectStatus('error');
                        }
                        else {
                            tabs = [];
                            $('#dataTable tr').not(':first').each(function () {
                                getGroupFromFirstColumn(this);
                            });
                            generateTabs();
                            $('.selectpicker').selectpicker();
                            toggleConnectStatus('ok');
                            $('#main-containter').css("height", `${$('#dataTable').height() + 250}px`)

                        }
                    },
                    "error": function (responseReference, responseText) {
                        toggleConnectStatus('error');
                    },
                },
                columns: [
                    {
                        data: '_Id', title: 'ID', "visible": false,
                        "searchable": false
                    },
                    { data: 'routeName', title: 'Tur' },
                    { data: 'pinStartTimeString', title: 'Pintid', render: pinstart_render, "visible": false, },
                    { data: 'carNumber', title: 'Bilnr', render: renderEmptyIfZeroOrEmpty },
                    { data: 'portNumber', title: 'Port', render: renderEjValdIfZeroOrEmpty },
                    { data: 'loadingLevel', title: 'Lastningsstatus', render: convert_loadingLevel_toValue },
                    { data: 'numberOfCustomers', title: 'Kunder' },
                    { data: 'numberOfColdBoxes.value', title: 'Lådor', render: numberOfColdBoxes_input },
                    { data: 'restPicking.value', title: 'Restplock', render: restPicking_input },
                    { data: 'locationStatus', title: 'Plats', render: location_input },
                    { data: 'numberOfFrozenBoxes.value', title: 'Frys', render: numberOfFrozenBoxes_input },
                    { data: 'numberOfBreadBoxes.value', title: 'Bröd', render: numberOfBreadBoxes_input },
                    { data: 'controlIsDone.value', title: 'Kontroll', render: controlIsDone_input },
                ],
                "order": [[2, "asc"]],

            });
            $('thead th').each(function () {
                $(this).addClass("stickyHeader");
            })
        });
        function reloadAjax() {
            table.ajax.reload(null, false);
        }
        setInterval(function () {
            toggleConnectStatus('loading');
            console.log('auto-reloading')
            table.ajax.reload(null, false);
        }, 300000);
    </script>
}