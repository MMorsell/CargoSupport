@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Home Page";
}

<div class="container-fluid">
    <h6>Datum</h6>
    <div>
        <div style="padding-left: 20px;" class="group">
            <input type="text" id="calendar-from-table-tr">
            <span class="bar"></span>
        </div>
    </div>
    <table id="dataTable" class="table table-striped table-bordered" style="width:100%; white-space: nowrap;">
        <thead style="position: sticky; top: 0;">
        </thead>
    </table>
</div>

@section Scripts
{

    <script>
        let table;

        function updateRow(thisRef) {
            var dataRef = table.row($(thisRef).parents('tr')).data();
            /*
             * Updatetypes
             * driver: driver_select
             * preRideAnnotation: preRideInput
             * postRideAnnotation: postRideInput
             * portNumber: port_selectBox
             * carNumber: carNumber_selectBox
             * loadingLevel: convert_loadingLevel_toSelectbox
             */

            var object = {
                _Id: dataRef._Id,
                routeName: dataRef.routeName,
                preRideAnnotation: null,
                postRideAnnotation: null,
                portNumber: -1,
                carNumber: null,
                loadingLevel: -1,
                driver: {}
            };

            switch (thisRef.id) {
                case 'driver_select':
                    object.driver.id = parseInt(thisRef.value);
                    break;
                case 'preRideInput':
                    object.preRideAnnotation = thisRef.value;
                    break;
                case 'postRideInput':
                    object.postRideAnnotation = thisRef.value;
                    break;
                case 'port_selectBox':
                    object.portNumber = parseInt(thisRef.value);
                    break;
                case 'carNumber_selectBox':
                    object.carNumber = thisRef.value;
                    break;
                case 'convert_loadingLevel_toSelectbox':
                    switch (thisRef.value) {
                        case 'Ej påbörjad': object.loadingLevel = 0;
                            break;
                        case 'Återanvända': object.loadingLevel = 1;
                            break;
                        case 'Påbörjad': object.loadingLevel = 2;
                            break;
                        case 'Klar': object.loadingLevel = 3;
                            break;
                    }
            }
            postUpdate(JSON.stringify(object));
        }

        function postUpdate(jsonData) {
            var dataType = 'application/json';
            console.log('Submitting form...');
            $.ajax({
                type: 'POST',
                url: baseHost + '/api/Upsert/UpsertTransport',
                //dataType: 'json',
                contentType: dataType,
                data: jsonData,
                error: function (jqXHR, exception) {
                    debugger;
                },
                success: function (result) {
                }
            });
        }

        const simple_checkbox = function (data, type, full, meta) {
            var is_checked = data == true ? "checked" : "";
            return '<input type="checkbox" onclick=updateRow(this) class="checkbox" ' +
                is_checked + ' />';
        }

        const simple_intInput = function (data, type, full, meta) {
            return '<input type="number" onChange=updateRow(this) class="form-control" value="' +
                data + '"  />';
        }

        const port_selectBox = function (data, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return data;
            }

            var selectBox = [];
            selectBox.push(
                '<select class="form-control" id="port_selectBox" onChange=updateRow(this)>'
            );

            if (data === 0) {
                selectBox.push('<option value="0" selected></option>')
            }

            for (i = 0; i < availablePorts.length; i++) {
                if (availablePorts[i] === data) {
                    selectBox.push('<option value="' + availablePorts[i] + '" selected>' + availablePorts[i] + '</option>')
                }
                else {
                    selectBox.push('<option value="' + availablePorts[i] + '">' + availablePorts[i] + '</option>')
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const carNumber_selectBox = function (data, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return data;
            }

            var selectBox = [];
            selectBox.push(
                '<select class="form-control" id="carNumber_selectBox" onChange=updateRow(this)>'
            );

            for (i = 0; i < availableCars.length; i++) {
                if (availableCars[i] === data) {
                    selectBox.push('<option value="' + availableCars[i] + '" selected>' + availableCars[i] + '</option>')
                }
                else {
                    selectBox.push('<option value="' + availableCars[i] + '">' + availableCars[i] + '</option>')
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const driver_selectBox = function (data, type, full, meta) {
            if ([101, 102, 103, 104, 105, "Egen"].includes(data)) {
                $('#driver_selectBox').val(data);
            }
            return '<select class="form-control" onChange=updateRow(this) id="driver_selectBox"><option value = "105" >105</option ></select >';
        }

        const pinstart_render = function (data, type, full, meta) {
            return '<p>' + data + '-' + full.pinEndTimeString + '</p > ';
        }

        const driver_schedual = function (data, type, full, meta) {
            return '<p>' + data.begTimeString + '-' + data.endTimeString + '</p > ';
        }

        const current_Driver = function (driverObject, type, full, meta) {

            if (type === 'sort' || type === 'filter') {
                return driverObject.fullName;
            }

            var selectBox = [];
            selectBox.push(
                '<select class="form-control" id="driver_select" onChange=updateRow(this)>'
            );

            const availableDrivers = table.ajax.json().selectValues;
            for (i = 0; i < availableDrivers.length; i++) {
                if (availableDrivers[i].id === driverObject.id) {
                    selectBox.push('<option value="' + availableDrivers[i].id + '" selected>' + availableDrivers[i].fullNameWithTime + '</option>')
                }
                else {
                    selectBox.push('<option value="' + availableDrivers[i].id + '">' + availableDrivers[i].fullNameWithTime + '</option>')
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        $(document).ready(function () {
            table = $('#dataTable').DataTable({
                pageLength: 250,
                "ajax": {
                    "url": baseHost + '/api/public/GetTransport',
                    "data": {
                        "dateString": function () { return formatDate(ajaxDate) }
                    },
                    "dataSrc": "data",
                    //"complete": function (responseReference, responseText) {
                    //    Alldrivers = responseReference.responseJSON.selectValues;
                    //}
                },
                columnDefs: [
                    { "width": "20%", "targets": 3 }
                ],
                columns: [
                    {
                        data: '_Id', title: 'ID', "visible": false,
                        "searchable": false
                    },
                    { data: 'routeName', title: 'Turnamn' },
                    { data: 'pinStartTimeString', title: 'Pintid', render: pinstart_render },
                    { data: 'driver', title: 'Lev. Ansvarig', render: current_Driver },
                    { data: 'carNumber', title: 'Bilnr', render: carNumber_selectBox },
                    { data: 'portNumber', title: 'Port', render: port_selectBox },
                    { data: 'loadingLevel', title: 'Lastningsstatus', render: convert_loadingLevel_toSelectbox },
                    { data: 'preRideAnnotation', title: 'Kommentar', render: preRideInput },
                    { data: 'postRideAnnotation', title: 'Dold Kommentar', render: postRideInput },
                    { data: 'numberOfCustomers', title: 'Kunder' },
                    { data: 'numberOfColdBoxes', title: 'Lådor', render: hidden_IntIfNull },
                    { data: 'restPlock', title: 'Restplock', render: disabled_checkbox },
                    { data: 'numberOfFrozenBoxes', title: 'Frys', render: hidden_IntIfNull },
                    { data: 'numberOfBreadBoxes', title: 'Bröd', render: hidden_IntIfNull },
                    { data: 'controlIsDone', title: 'Kontroll', render: disabled_checkbox },
                ],
                "order": [[1, "asc"]],

            });

            $('thead th').each(function () {
                $(this).addClass("stickyHeader");
            })

        });
    </script>
}