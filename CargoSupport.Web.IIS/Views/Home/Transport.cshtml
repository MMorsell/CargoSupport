@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Home Page";
}
<div id="main-containter" class="container-fluid">
    <iframe id="txtArea1" style="display:none"></iframe>
    <div style="float: right;">
        <h3 style="display: inline-block;">Status</h3>
        <img id="errorSymbol" style="display:none" src="~/img/svg/errorSymbol.svg" />
        <img id="onlineSymbom" style="display:none" src="~/img/svg/onlineSymbol.svg" />
        <div id="connectStatus" style="display:none" class="lds-facebook"><div style="display: inline-block;"></div><div style="display: inline-block;"></div><div style="display: inline-block;"></div></div>
    </div>
    <div class="row">
        <h6>Datum</h6>
        <div>
            <div style="padding-left: 20px;" class="group">
                <input type="text" id="calendar-from-table-tr">
                <span class="bar"></span>
            </div>
        </div>
        <button class="btn btn-outline-success" style="margin-left: 20px; margin-top: -3px;" id="btnExport" onclick="fnExcelReport('dataTable');"> Exportera som excel</button>
    </div>
    <div class="row">
        <div id="dataTableTabs" class="tab">
        </div>
    </div>
    <table id="dataTable" class="table table-striped table-bordered" style="width:100%; white-space: nowrap;">
        <thead style="position: sticky; top: 0;">
        </thead>
    </table>

    <div class="row">
        <a class="btn btn-outline-success" asp-area="" asp-controller="Manage" asp-action="AddResourceRoute">Lägg till resurstur</a>
    </div>
</div>

@section Scripts
{
    <script src="~/js/UpsertFunctions.js" asp-append-version="true"></script>
    <script src="~/lib/aspnet/signalr/dist/browser/signalr.js" asp-append-version="true"></script>
    <script src="~/js/chat.js" asp-append-version="true"></script>
    <script>
        let table;
        let currentTab;
        const mainApiEndpoint = '/api/v1/public/GetTransport';
        async function updateRow(thisRef) {
            var dataRef = table.row($(thisRef).parents('tr')).data();
            /*
             * Updatetypes
             * driver: driver_select
             * preRideAnnotation: preRideInput
             * postRideAnnotation: postRideInput
             * portNumber: port_selectBox
             * carNumber: carNumber_selectBox
             * loadingLevel: convert_loadingLevel_toSelectbox
             */

            let upsertDictionary = {};
            upsertDictionary["hubId"] = await connection.invoke('GetConnectionId');
            upsertDictionary["_Id"] = dataRef._Id;

            switch (thisRef.id) {
                case 'driver_select':
                    upsertDictionary[thisRef.id] = parseInt(thisRef.value);
                    break;
                case 'preRideInput':
                    upsertDictionary[thisRef.id] = thisRef.value;
                    break;
                case 'postRideInput':
                    upsertDictionary[thisRef.id] = thisRef.value;
                    break;
                case 'port_selectBox':
                    upsertDictionary[thisRef.id] = thisRef.value;
                    break;
                case 'carNumber_selectBox':
                    upsertDictionary[thisRef.id] = thisRef.value;
                    break;
                case 'convert_loadingLevel_toSelectbox':
                    switch (thisRef.value) {
                        case 'Ej påbörjad':
                            upsertDictionary[thisRef.id] = 0;
                            break;
                        case 'Återanvända':
                            upsertDictionary[thisRef.id] = 1;
                            break;
                        case 'Påbörjad':
                            upsertDictionary[thisRef.id] = 2;
                            break;
                        case 'Klar':
                            upsertDictionary[thisRef.id] = 3;
                            break;
                    }
            }
            postUpdate(JSON.stringify(upsertDictionary), upsertDictionary);
        }

        function postUpdate(jsonData, upsertDictionary) {
            var dataType = 'application/json';
            console.log('Submitting form...');
            $.ajax({
                type: 'POST',
                url: '/api/v1/Upsert/UpsertTransport',
                contentType: dataType,
                data: jsonData,
                error: function (jqXHR, exception) {
                    toggleConnectStatus('error');
                },
                success: function (result) {
                    toggleConnectStatus('ok');
                    updateSingleRecord(upsertDictionary);
                }
            });
        }
        const simple_intInput = function (data, type, full, meta) {
            return `<input type="number" onChange=updateRow(this) class="form-control" value="${data}" />`;
        }

        const port_selectBox = function (data, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return data;
            }

            var selectBox = [];
            selectBox.push(
                `<select ${bootstrapSelectDropdownStyleWithLiveSearch}  id="port_selectBox" onChange=updateRow(this)>`
            );

            if (data === 0) {
                selectBox.push('<option value="0" selected></option>')
            }

            for (i = 0; i < availablePorts.length; i++) {
                if (availablePorts[i] === data) {
                    selectBox.push(`<option value="${availablePorts[i]}" selected>${availablePorts[i]}</option>`)
                }
                else {
                    selectBox.push(`<option value="${availablePorts[i]}">${availablePorts[i]}</option>`)
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const carNumber_selectBox = function (data, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return data;
            }

            var selectBox = [];
            selectBox.push(
                `<select data-show-subtext="true" ${bootstrapSelectDropdownStyleWithLiveSearch} id="carNumber_selectBox" onChange=updateRow(this)>`
            );

            selectBox.push(
                '<option value=""></option>'
            );

            const avaialableCars = table.ajax.json().carOptions;
            for (i = 0; i < avaialableCars.length; i++) {
                if (avaialableCars[i].name === data) {
                    selectBox.push(`<option data-subtext="${avaialableCars[i].maxWeight} kg" value="${avaialableCars[i].name}" selected>${avaialableCars[i].name}</option>`)
                }
                else {
                    selectBox.push(`<option data-subtext="${avaialableCars[i].maxWeight} kg" value="${avaialableCars[i].name}" >${avaialableCars[i].name}</option>`)
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        const driver_schedual = function (data, type, full, meta) {
            return `<p>${data.begTimeString} - ${data.endTimeString}</p > `;
        }

        const current_Driver = function (driverObject, type, full, meta) {
            if (type === 'sort' || type === 'filter') {
                return driverObject.fullName;
            }

            var selectBox = [];

            if (driverObject.id === -1) {
                selectBox.push(
                    `<select data-show-subtext="true" data-style="btn-danger" data-width="auto" title="Inget valt" class="selectpicker show-tick" data-live-search="true" id="driver_select" onChange=updateRow(this)>`
                );
                selectBox.push(
                    '<option value="-1" selected></option>'
                );
            }
            else {
                selectBox.push(
                    `<select data-show-subtext="true" data-width="auto" ${bootstrapSelectDropdownStyleWithLiveSearch} id="driver_select" onChange=updateRow(this)>`
                );
                selectBox.push(
                    '<option value="-1"></option>'
                );
            }

            const availableDrivers = table.ajax.json().selectValues;
            for (i = 0; i < availableDrivers.length; i++) {
                if (availableDrivers[i].id === driverObject.id) {
                    selectBox.push(`<option data-subtext="${availableDrivers[i].begTimeString} - ${availableDrivers[i].endTimeString}" value="${availableDrivers[i].id}" selected>${availableDrivers[i].fullName}</option>`)
                }
                else {
                    selectBox.push(`<option data-subtext="${availableDrivers[i].begTimeString} - ${availableDrivers[i].endTimeString}" value="${availableDrivers[i].id}">${availableDrivers[i].fullName}</option>`)
                }
            }

            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        $(document).ready(function () {
            table = $('#dataTable').DataTable({
                pageLength: 250,
                "ajax": {
                    "url": mainApiEndpoint,
                    "data": {
                        "dateString": function () { return formatDate(ajaxDate) }
                    },
                    "dataSrc": "data",
                    "complete": function (responseReference, responseText) {
                        if (responseText === "error") {
                            toggleConnectStatus('error');
                        }
                        else {
                            tabs = [];
                            $('#dataTable tr').not(':first').each(function () {
                                getGroupFromFirstColumn(this);
                            });
                            generateTabs();
                            $('.selectpicker').selectpicker();
                            toggleConnectStatus('ok');

                            $('#main-containter').css("height", `${$('#main-containter').height()}px`)
                        }
                    },
                    "error": function (responseReference, responseText) {
                        toggleConnectStatus('error');
                    },
                },
                columnDefs: [
                    { "width": "20%", "targets": 3 },
                    { "width": "10%", "targets": 4 },
                    { "width": "10%", "targets": 5 },
                ],
                columns: [
                    {
                        data: '_Id', title: 'ID', "visible": false,
                        "searchable": false
                    },
                    { data: 'routeName', title: 'Turnamn' },
                    { data: 'pinStartTimeString', title: 'Pintid', render: pinstart_render },
                    { data: 'driver', title: 'Lev. Ansvarig', render: current_Driver },
                    { data: 'carNumber', title: 'Bilnr', render: carNumber_selectBox },
                    { data: 'portNumber', title: 'Port', render: port_selectBox },
                    { data: 'loadingLevel', title: 'Lastningsstatus', render: convert_loadingLevel_toSelectbox },
                    { data: 'preRideAnnotation', title: 'Kommentar', render: preRideInput_fat },
                    { data: 'postRideAnnotation', title: 'Dold Kommentar', render: postRideInput_fat },
                    { data: 'numberOfCustomers', title: 'Kunder' },
                    { data: 'numberOfColdBoxes', title: 'Lådor', render: hidden_IntIfNull },
                    { data: 'restPlock', title: 'Restplock', render: disabled_checkbox },
                    { data: 'numberOfFrozenBoxes', title: 'Frys', render: hidden_IntIfNull },
                    { data: 'numberOfBreadBoxes', title: 'Bröd', render: hidden_IntIfNull },
                    { data: 'controlIsDone', title: 'Kontroll', render: disabled_checkbox },
                ],
                "order": [[2, "asc"]],

                "rowCallback": function (row, data, index) {
                }
            })

            $('thead th').each(function () {
                $(this).addClass("stickyHeader");
            })

        });
        setInterval(function () {
            toggleConnectStatus('loading');
            console.log('auto-reloading')
            table.ajax.reload(null, false);
        }, 300000);
    </script>
}