@model List<CargoSupport.Models.DatabaseModels.DataModel>;
@{
    ViewData["Title"] = "Home Page";
}

<div><select class="selectpicker show-tick" data-style="btn-primary"><option>Mustard</option></select></div>
<table id="example" class="table table-striped table-bordered" style="width:100%; white-space: nowrap;">
    <thead>
    </thead>
</table>

@section Scripts
{

    <script>
        let table;

        let prevValues = [];

        function saveHoverVal(thisReference) {
            let tempOldVal = thisReference.options[thisReference.selectedIndex].value
            var dataRef = table.row($(thisReference).parents('tr')).data();

            var reference = prevValues.find(x => x.id === dataRef.id);

            if (reference == null) {
                prevValues.push(
                    { id: dataRef.id, oldVal: tempOldVal }
                );
            }
            else {
                reference.oldVal = tempOldVal;
            }

        }

        function proptForSignatureInt(thisReference) {
            var dataRef = table.row($(thisReference).parents('tr')).data();
            var updatedValue = thisReference.options[thisReference.selectedIndex].value;
            var personSignature = prompt("Signatur", "");

            if (personSignature == null) {
                var reference = prevValues.find(x => x.id === dataRef.id);

                if (reference == null) {
                    debugger;
                    thisReference.value = 99;
                }
                else {
                    thisReference.value = reference.oldVal;
                }
            }
            else {
                //TODO Add post update
            }
        }

        function proptForSignatureBool(thisReference) {
            var dataRef = table.row($(thisReference).parents('tr')).data();
            var updatedValue = thisReference.checked;
            var personSignature = prompt("Signatur", "");

            if (personSignature == null) {
                thisReference.checked = !updatedValue;
            }
            else {
                //TODO Add post update
            }
        }

        function updateRow(thisRef) {

            //TODO Add functional post update
            //var dataRef = table.row($(thisRef).parents('tr')).data();

            //var object = {
            //    id: dataRef.id,
            //    routeName: dataRef.routeName,
            //    numberOfCustomers: dataRef.numberOfCustomers,
            //    tid: dataRef.tid,
            //    numberOfColdBoxes: dataRef.numberOfColdBoxes,
            //    restPlock: dataRef.restPlock,
            //    tidFrys: dataRef.tidFrys,
            //    numberOfFrozenBoxes: dataRef.numberOfFrozenBoxes,
            //    estimatedRouteStart: dataRef.estimatedRouteStart
            //};

            //var object = {
            //    Public_Transport: nestledObject
            //};
            postUpdate(object);
        }

        function postUpdate(data) {
            debugger;
            //JSON data
            var dataType = 'application/json';

            console.log('Submitting form...');
            $.ajax({
                type: 'POST',
                url: 'http://localhost:5555/api/public/UpdateRecord',
                dataType: 'json',
                contentType: dataType,
                data: data,
                error: function (jqXHR, exception) {
                    debugger;
                },
                success: function (result) {
                    console.log(result);
                    console.log('Data received: ');
                }
            });
        }

        const disabled_checkbox = function (data, type, full, meta) {
            var is_checked = data == true ? "checked" : "";
            return '<input type="checkbox" disabled class="checkbox" ' +
                is_checked + ' />';
        }

        const simple_checkbox = function (data, type, full, meta) {
            var is_checked = data == true ? "checked" : "";
            return '<input type="checkbox" onChange=proptForSignatureBool(this) class="checkbox" ' +
                is_checked + ' />';
        }

        const simple_textInput = function (data, type, full, meta) {
            return '<input type="text" onclick=updateRow(this) class="form-control" value="' +
                data + '"  />';
        }
        const simple_intInput = function (data, type, full, meta) {
            return '<input type="number" onChange=updateRow(this) class="form-control" value="' +
                data + '"  />';
        }

        const itemIncrementInput = function (data, type, full, meta) {

            var selectBox = [];
            selectBox.push(
                '<div class="selectpicker show-tick"><select onmouseover="saveHoverVal(this)" onChange=proptForSignatureInt(this) class="dropdown bootstrap-select">'
            );

            for (i = 0; i < 100; i++) {
                if (i === data) {
                    selectBox.push('<option selected>' + i + '</option>')
                } else {
                    selectBox.push('<option>' + i + '</option>')
                }
            }
            selectBox.push(
                '</select>'
            );
            return selectBox.join("");
        }

        $(document).ready(function () {
            table = $('#example').DataTable({
                pageLength: 100,
                "ajax": {
                    "url": "http://localhost:5555/api/public/GetStorage",
                    "dataSrc": function (response) {
                        debugger;
                        console.log(response);
                        dataR = response;
                    },
                    "dataSrc": ""
                },
                columns: [
                    {
                        data: 'id', title: 'ID', "visible": false,
                        "searchable": false
                    },
                    { data: 'routeName', title: 'Tur' },
                    { data: 'carNumber', title: 'Bilnr', },
                    { data: 'portNumber', title: 'Port', },
                    { data: 'loadingIsDone', title: 'Lastning är klar', render: disabled_checkbox },
                    { data: 'numberOfCustomers', title: 'Kunder' },
                    { data: 'numberOfColdBoxes.value', title: 'Lådor', render: itemIncrementInput },
                    { data: 'restPicking.value', title: 'Restplock', render: simple_checkbox },
                    { data: 'numberOfFrozenBoxes.value', title: 'Frys', render: itemIncrementInput },
                    { data: 'numberOfBreadBoxes.value', title: 'Bröd', render: itemIncrementInput },
                    { data: 'controlIsDone', title: 'Kontroll', render: simple_checkbox },
                ],
                "order": [[1, "asc"]],

            });

        });
        function reloadAjax() {
            table.ajax.reload(null, false);
        }
    </script>
}